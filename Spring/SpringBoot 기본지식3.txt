스프링 웹개발 기초

웹 개발
1.정적 컨텐츠(파일을 그대로 웹브라우저에 전달)
2.MVC와 템플릿 엔진(JSP,PHP같은 template엔진->html을 서버에서 동적으로 변환해서 웹브라우저에 전달)
3.API(안드로이드나 아이폰과 협업할때 json이라는 데이터포맷으로 클라이언트한테 데이터 전달,서버끼리 통신)


정적컨텐츠
main-resources-static폴더에 원하는 html파일을 올려놓으면
해당 html 이름으로 localhost가 찾으면 들어가진다.
정적컨텐츠엔 프로그래밍은 불가능하다.

원리
웹브라우저->localhost:8080/hello-static.html 요청
->내장 톰캣서버가 요청을 받음
->Spring Container의 controller에 해당 html이 있는지 확인
->있으면 그걸 실행 없으면? resources파일을 찾음
->반환.


MVC와 템플릿 엔진
Model View Controller

원래는 View와 Controller가 합쳐져있었는데, 이러면 선택과 집중을 하기 어려움
그래서 분리함.
View:화면에 보여지는것에 집중
Controller:비지니스 로직에 집중.

HelloController에 helloMvc를 추가
->컨트롤러를 추가했으니, 그걸 통해 보여줄 view도 추가.
->template에 hello-template.html추가.

thymeleaf의 장점:서버 없이 html을 열 수 있다.
<p th:text="'hello ' + ${name}">hello! empty</p>
이 문장에서 서버에선 <p th:text="'hello ' + ${name}">이게 뜨지만
직접 열면 hello! empty이게 뜬다.
개발자들의 주석정도로 생각하면 편할듯.

그대로 실행해서 
localhost:8080/hello-mvc하면 에러가뜸.
그래서 실행 로그를 보면 warn이 떠있음.
Required request parameter 'name' for method parameter type String is not present
->name파라미터가 String으로 현재 요청되지않았다.
->파라미터에 조작이 필요

tip:파라미터에 옵션을 넣을땐 ctrl+p를 하면 쉽게 가능.
required form으로 value="name"형태로 넣어야 동작 가능.

그 후에, http 접속시
localhost:8080/hello-mvc?name=
에서 ?name=(?value에 들어있는 String값) -> html에서 인자를 넘겨주는 방식.

원리
localhost:8080/hello-mvc를 내장톰캣에 요청
helloController먼저 접근
@GetMapping annotation으로 있는걸 확인
model에 name속성을 추가할채로 hello-template을 return
그걸 viewResolver가 templates/hello-template.html을 찾아서
text="'hello ' + ${name}"에 해당되는걸 name속성으로 대체해서(동적 변환)
화면에 view해준다

정리:Controller가 받은 정보를 모델에 저장한 후 View에 넘겨줘서 렌더링해서 html로 변환 후 화면에 출력
->html로 넘김

API
mvc패턴과 동일하게 짜는데,
RequestParam에서 value형태로 안 전해줘도 되고
@ResponseBody라는 annotation이 하나 더 붙음.
->html의 바디가 아닌, http의 바디부에 return값을 바로 넣겠다.

이전과 차이:view를 거치지 않고 html로 그대로 내려감.

실제로 내장서버로 hello-string을 호출해서 페이지 소스보기를 해보면,
위에 정적컨텐츠나 mvc패턴에선 html페이지가 출력되었는데
API같은 경우 return값만 떡하니 나옴.

이전까지는 template엔진을 이용해서 html페이지를 조물조물해서 http에 넘겨주는 방식
API는 data를 그대로 http에 넘김.

API는 JSON방식.

JSON이란?
JavaScript Object Notation
key-value쌍으로 이루어진 데이터 객체를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는
개방형 표준 포맷. 요즘 XML을 대체해서 많이 쓴다.
XML:<html><\html> 무겁고, 열고 닫고 코드 많아짐.
자바스크립트라 써져있지만, 독립형 데이터포맷이라 C,C++,자바,파이썬,루비 등등 다양한 언어 사용 가능.
{key:value}형태로 구성되어있음.->심플함.

요즘은 JSON이 디폴트로 객체를 넘겨주고 넘겨받고 함.

tip:객체를 생성하면 getter setter 만드는건 기본. 이걸 자동 생성하게 해주는 단축키
alt+insert!!!!!!!!

@ResponseBody의 작용원리
http://localhost:8080/hello-api 접근 요청
내장톰캣 서버에서 컨트롤러에 접근요청 전달.
컨트롤러에서 hello-api에 mapping되는걸 찾고, 있으면?
1.MVC패턴의 경우
View Resolver에 전달해줌
2.API의 경우
@ResponseBody annotation을 붙여주면 http의 body에 return값을 바로 response를 해줌
근데 문자가 아니고 객체데이터?
->JSON방식으로 data를 만들어서, http에 response해준다.
HttpMessageConverter가 View Resolver역할로 대체해서 동작한다.

기본 문자처리:StringHttpMessageConverter
기본 객체처리:MappingJackson2HttpMessageConverter 등등(디폴트 변환처리)

*Spring에서 API return의 경우 JSON이 디폴트지만
http에서 특정한 데이터 포맷으로 받고싶어하는 경우가 있음(http accept 헤더)
이런 경우, 그것에 해당하는 HttpMessageConverter가 작동해서 넘겨진다.

근데 사실 JSON만 쓴다.


정리
정적컨텐츠:그냥 파일을 그대로 내려준다
MVC & Template Engine:템플릿 엔진을 MVC로 쪼개서 View를 템플릿 엔진으로 렌더링해서
		       클라이언트에게 전달해준다
API:객체를 (HttpMessageConverter를 이용,직통으로) 반환하는것.
