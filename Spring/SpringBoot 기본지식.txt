Spring기초

spring initializr로 프로젝트 생성시

Maven/Gradle:어떤 library,lifecycle을 쓸건지에 대한 설정을 위해서.

spring boot버전 선택
정식 릴리즈 된 버전중 최신으로 선택하면 됨.

project metadata
group엔 기업 이름을 주로 적음
artifact는 빌드 돼서 나오는 결과물(프로젝트 명)

-----------------------------------------------------------------------
dependencies(중요)
spring boot 기반으로 프로젝트를 만들때
어떤 library를 가져다 와서 쓸건지 설정해 주는 것

일단 써볼건 web서버 구현할거니까 spring web(Web)
	   html엔진 구현을 위한 thymeleaf(Template Engine)
-----------------------------------------------------------------------
따로 폴더를 관리 할까 했는데, 그냥 ideaProject폴더에 넣는걸로 했음.
앞으론 ideaProject폴더 안에 Spring폴더를 따로 만들어서 여기서
spring관련 파일들을 처리하는걸로 하겠음.

gradle을 사용했을시, main과 test폴더가 나뉘어져있음.
구현과 테스트 케이스를 분리시켜놓은듯.
main밑엔 java와 resources가 있음(실제 소스코드)
test밑엔 test case 구현을 위한 코드(테스트 코드)
->테스트 코드가 존나 중요해서 따로 분리시켜놨다.

resources는 java파일을 제외한 모든 파일들.

build.gradle->중요(원래 직접 다 타이핑 했어야 됐음.이젠 설정한대로 구현돼 나옴)

gradle의 경우 버전 설정,library땡겨오는것 정도 알면 되고, 이후에 공부해둘것.(심화)

build.gradle에서
plugin:어떤 springboot버전을 썼는지, 어떤 spring dependency를 썼는지 어떤 언어를 썼는지.

group:회사명
version:
sourceCompatibility:설정 언어 버전

repositories:dependencies의 추가된 것들을 import하는 장소.

dependencies:어떤 dependencies를 add했는지
->html template인 thymeleaf와 spring web을 추가했어서 그대로 나옴.
tempImplementation:JUnit5로 testcase를 구현해놓은것(요즘 기본으로 나옴)

gitIgnore:git source code 관리해주는 용도로 넣어둠.
(git에는 구현을 위한 기본 코드만 올라갈수 있게끔 관리)


-----------------------------------------------------------------------
아무것도 구현 안하고 그냥 main실행시켜봤을때 출력 코드 중
Tomcat started on port(s): 8080 (http) with context path
->localhost:8080에 해당 springboot파일이 실행되었다는 뜻.

어떻게 실행되는가?
main메서드 실행시 유일하게 자동 구현되어있는 코드인
SrpingApplication.run(HelloSpringApplication.calss,args);를
실행했을때,Annotation된 SpringBootApplication을 실행하는데
아무것도 설정 안된 SBA의 경우, tomcat이란 내장 서버(local host)를
호출해서 웹서버를 구현한다.
-----------------------------------------------------------------------

springBoot에서 main메서드 실행시, IntelliJ가 아닌 gradle로 실행되는걸
방지하는법:file->setting에서 gradle 검색 후 
build and run using과 run tests using을 모두 intelliJ로 바꿔주면 됨.
why?gradle로 실행시 run과 test가 느린 경우가 있어서 그럼.


라이브러리 살펴보기
전제:spring엔 정말 많은 library들이 있고, 이들 사이에 의존관계가 있는
library들도 정말 많다.

library를 가져옴-> dependencies에 implementation됨.
(API를 import한거의 거시적 관점인듯?)

-----------------------------------------------------------------------
근데 막상 external library에 들어가보면 존나많다.(위에 있는건 3갠데)
이것들은 뭔가?요즘 java web을 구현하기 위한 기본적인 library들.
이것들이 서로 의존관계에 얽혀서 기본적으로 이정도를 가져와야된다.
ex)spring web library를 땡기면, spring web과 관련된(의존관계가 있는)
library들을 gradle이 '자동적'으로 같이 쭉 다 땡겨와준다.
-----------------------------------------------------------------------
이 의존 관계를 폴더형식으로 알수 있는 방법은,
intelliJ 최좌하단의 창 버튼을 클릭하면 intelliJ 제일 오른쪽에
gradle이 뜨고, gradle을 누르면 Dependencies폴더가 있는데,
여기 compileClasspath에 들어가보면 우리가 add한 두개의
library들이 있고, 이걸 클릭해보면 연관된 library들이 쫙 나온다.
-----------------------------------------------------------------------
예를들어 springBootStarterWeb과 연관된 tomcat의 경우 내장되어서
서버관리를 해주는데, 예전의 자바는 서버를 따로 만들어놓고,
서버에 자바 코드를 밀어넣는 방식이였다면, 현재는 gradle이
내장서버를 자동으로 hosting해서 따로 서버를 만들 필요가 없다.
-----------------------------------------------------------------------
여기서 __tomcat__이란?
아파치 소프트웨어에서 만든 웹 컨테이너만 있는 웹 어플리케이션 '서버'.
WebApplicationServer=WAS.
웹 서버와 연동해서 실행 할 수 있는 자바 환경을 제공.
JavaServerPage와 자바서블릿이 실행할 수 있는 환경을 제공.
XML파일을 편집하여 설정 가능. HTTP서버도 자체내장.
(XML? 다목적 마크업 언어.
마크업 언어? 태그등을 이용해서 문서 데이터 구조를 명기하는 언어 구조)
-----------------------------------------------------------------------
여기서 __WAS의 개념 정리__
웹서버란?
1.클라이언트가 요청한 정적페이지를 HTTP프로토콜을 통해서 제공.
2.클라이언트가 동적인 요청을 했을떄, 컨테이너로 보내주는 역할.
컨테이너란?
동적인 데이터들을 처리하여 정적인 페이지로 생성해주는 SW모듈.
ex)로그인 후 mypage메뉴 호출
->로그인 정보에 따라 mypage에 호출될 내용들이 달라짐.
이럴때 사용자가 요청하면 웹서버가 정적인 페이지는 처리하고
동적인 페이지는 컨테이너에 전달해서 컨테이너가 정적인 파일로
만들어서 return해주는 형태.

결론적으로 WAS란 웹서버에선 동적인페이지 처리를 할 수 없기때문에
클라이언트<>웹서버<>"컨테이너"를 붙여놓은 서버라고 보면 됨.
웹 어플리케이션+서버.
ex)웹 서버에서 내정보를 눌러 myinfo page 들어갈때
WAS가 myinfo를 라우팅 할때, 정적페이지론 처리가 불가하다.
라우팅?어떤 네트워크 안에서 데이터를 보낼때 최적의 경로를 선택하는 과정.
->먼저 DB에서 데이터를 가져옴. 그다음 그 데이터를 가공해서,
myinfo.ejs(node.js로 웹을 구현한다 가정)로 변환하고, 
이 ejs파일을 html로 바꿔준 다음에(웹서버가 알아듣게끔)
정적인 파일 형태로 웹서버에 전송.
웹서버는 다시 html을 클라이언트에게 전송.
-----------------------------------------------------------------------


spring core까지 땡겨옴.-> spring boot를 위한 전반적인 아키텍쳐 구축이 자동으로 된다.
-----------------------------------------------------------------------
**현업에선 System.out.println("hello");로 출력을 하지않고
	  log.in으로 출력함
why? 어떤 결과물들을 출력했고, 그중 에러로 나오는 것들의 결과물을
빠르게 추출해내기 위해서 기록형태로 남겨놓는 것.
println은 그냥 출력하면 끝이니까.

여기서 __Logging개념 정리__.
logging이란? 프로그램 개발 중이거나 완료 후 발생 할 수있는 오류에 대해
"디버깅"하거나 운영중인 프로그램 상태를 "모니터링" 하기 위해 정보(로그)를 남겨놓는것.
혹은 사용자(클라이언트) 상호작용을 기록하기 위한 용도.

현재 java에선 slf4j랑 logback이 많이 쓰인다.

SLF4J(Simple Logging Facade 4 Java)
logging framework의 facade pattern.
(파사드 패턴:서브시스템이 많고 복잡할때 단순 인터페이스를 중간에 끼워넣어서
	    의존성을 최소화 해주는 패턴)
->인터페이스이기때문에 단독으로 사용하지 못함.
->자바의 로깅 관련 라이브러리들을 추상화 시킨 interface.
SLF4J에 딸려있는 Log4J,Logback,tinylog등등의 Logging Framework를
SLF4J(Facade)로 때에 때라 내부적으로 적절하게 변환해서 연결.

logback:log4J의 단점을 개선해서 만든 자바 로깅 라이브러리.

springBootStarterWeb의 logging에 있어서 slf4j랑 logback이 
주로 많이 쓰여서 같이 땡겨와진다.
-----------------------------------------------------------------------


test library.
junit을 test할때 많이 씀.(test할때 제일 중요한듯)
mockito,assertj: test도와주는 library.





결론
Spring Boot Library에서 기본적으로 다뤄지는 핵심 library들

spring-boot-starter-web
->tomcat(웹서버)
->webmvc:웹 mvc(model view controller를 쓰는 패턴)
thymeleaf:타임리프 템플릿 엔진(view)
spring-boot-starter:__"스프링부트+스프링코어+로깅"__
로깅엔 logback(log4j 개량판)이랑 slf4j(자바 로깅 라이브러리를 파사드 패턴
으로 모아놓은 라이브러리)를 쓴다.

Test library
junit:테스트 프레임워크
mockito:목 라이브러리
assertj:테스트 코드를 좀 더 편하게 작성하게끔 도와주는 라이브러리.
spring-test:스프링 통합 테스트 지원.

