스프링 입문 4일차

회원관리 예제(요구사항 정리부터)

1.요구사항 정리
2.회원 도메인과 회원 객체를 저장,불러오기가 가능한 레포지토리 객체 만듬.
3.2를 테스트하는 테스트케이스 만듬.
4.실제 비즈니스 로직 서비스 개발
5.Junit이용 테스트 프레임워크 개발.



요구사항 정리
데이터:회원 id,이름
기능:회원 등록,조회
아직 DB선정이 되지 않음.

웹 app layer structure

controller -> service -> repository -> DB


	->     domain

컨트롤러:MVC의 컨트롤러
서비스:핵심 비즈니스 로직
도메인:회원,주문,쿠폰등등 DB에 저장되고 관리되는 비즈니스 도메인 객체.
레포지토리:DB에 접근, 도메인객체를 관리하는 객체.


클래스 의존관계
DB가 선정되지 않았기때문에, adapter처럼 갈아끼울수 있는 interface로 repository를 정의해놓고
멤버서비스와 메모리레포지토리를 상속,구현관계로 둠.
->DB를 선정하지 않은 경우엔 갈아끼우기 쉬운 interface로 구현한다.


domain
->클라이언트 정보들을 담는 데이터 객체(여기선 id와 name을 담는 Member 클래스)

repository
->도메인(클라이언트 정보)를 DB에 저장하고 불러올 관리 객체
멤버객체를 저장, id찾기, name찾기, 모두 찾기 등등 도메인을 어떻게 다룰지에 대해 정의.
그래서, DB가 선정 안된 경우엔 interface로 뼈대를 남겨놔서 DB가 정해지면 옮기면 됨.
그전에 보통 사전작업으로 하는게 메모리로 DB를 구현하는 형태.

레포지토리를 구현한 MemoryMemberRepository는 Map(중복성 제거)으로 멤버객체를 다룸.
여기서 Long(id)는 DB에서 Map에 저장할 때 중복성 제거를 위한 key값.

save의 경우 sequence(key값)을 하나 올려서 setId해주고 store에 put해서 return.
findByID와 findByName의 경우
회원정보를 다루는 도메인 자체가 객체이고, 도메인은 null값이 return될 수 있어서
Optional클래스(Wrapper 클래스)로 한번 감싸줘서, ofNullable메서드를 이용 exception방지해준다.

finaAll의 경우 ArrayList에 store에있는 values(store에 있는 모든 value값들)를 return 해준다.

findById의경우 id(Long)값인 기본형 타입이라 단순히 Optional로 감싸서 해결했지만
String의 경우 이 자체로 이미 객체라서
Strem메서드의 람다함수형식을 이용해서 레퍼런스로 받은 name과
store에 저장된 values에 있는 member.getName()과 같은지(.equals(name)) 확인 후
같은 값 아무거나 return(.findAny())해주는 형태.

return store.values().stream().filter(member -> member.getName().equals(name)).findAny();
이건
//
Map자료구조에 Long과 member로 저장된 store요소들에서 모든 values(member객체들)을
stream해서 모든 요소들을 접근하는데,
foreach처럼 store를 돌아다니는 iterator형태의 member변수가 member.getName().equals(name)
member객체의 name을 추출했을때 인자로 받은 name과 같은지 확인하고
같다면 아무거나(findAny())출력 해줘.
//->stream의 filter의 역할(내가 원하는 조건들로 걸러주는 역할)



회원 레포지토리 테스트케이스 작성

우리가 여태까지 했던 방법:main함수를 직접 돌려봄. 실제로 해보면 매우 비효율적임.
->그래서 JUnit이라는 프레임워크로 테스트를 생성해서 제대로 구현됐는지 테스트함.

테스트 케이스 작성시 꿀팁
똑같은 코드 복붙할때 변수명만 바꾸려고하면 변수명에 shift+f6하면 된다.

테스트케이스 작성 방법
"test"폴더에 main폴더에 repository에서 만들어둔 클래스이름+Test로 만듬.

그 후에, 그 클래스에서 구현했던 메서드들을 void형태로 구현할 예정.
그 클래스를 객체로 하는 변수 하나 만들어서.

그래서 해당 도메인 객체를 받아올 임시 객체 하나 만들어서 repository객체에 메서드에
도메인을 넣었을때 제대로 작동하는지 확인해보는 코드들을 작성

여기서 주로 쓰이는게 Assertions.assertThat인데 이걸 앞에 Assertion를 static하게 만들어서
assertThat(객체).isEqulaTo(객체);
두 객체는 도메인 객체 or 레포지토리 객체 중에 하나를 다루며 메서드 용도에 따라 순서가 바뀜.



그리고 중요한점은, 각 메서드별로 test진행이 가능하지만, class단위로 합쳐서 test진행시
각 메서드들에서 임시변수로 만들고 repository에 저장한 도메인 객체들이 제대로 처리가
안돼서 오류가 나는 경우가 많음
->@AfterEach 어노테이션 달고
repository클래스 가서 해당 자료구조를 clear하는 메서드를 만든다음 여기에 메서드로 구현해서
실행하면, 매번 메서드 실행 및 종료시 AfterEach 어노테이션이 달린 함수를 실행해줘서
오류가 안나게 된다. **중요**


여기서 현재 배운 방식
개발 후 테스트 케이스 작성.
->구현할 내용들을 먼저 작성하고 이 구현한 코드들이 잘 작동하는지 테스트케이스에서 확인하는 것.

테스트 케이스 작성 후 개발
->TDD(Test Driven Development)테스트 주도 개발.
미리 테스트 틀을 만들어 놓고, 개발을 했을때 테스트가 통과 되는지 확인하는 것.

***테스트 케이스는 실무에서 협업을 할때 매우매우매우 중요하게 다루는 부분이므로 따로 공부
해둘 필요가 있어보임.***


